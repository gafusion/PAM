# -*-Python-*-
# Created by wuwen at 19 June 2019  15:18
from pam_globs import *

import OMFITlib_pelletInfo as pei
import numpy as np

# Define function for ODE equation rate of pellet shrinking
def parks_point_deposition():
    drpdt = 0
    return


def parks_dt(Bt, Bt_exp, fracD, Te, ne, y):
    """
    This function calculates the ablation from a deuterium-tritium mixture pellet

    :param Bt: magnetic field (T)
    :param Bt_exp: exponent for reduction of ablation from Bt.
    :param fracD: fraction of pellet that is deuterium
    :param Te: electron temperature (eV)
    :param ne: electron density (1e20 m^-3)
    :param ycm: pellet radius (cm)

    """
    WD = pei.getAtomicWeight(['d'], [1])
    WT = pei.getAtomicWeight(['t'], [1])
    # fracD = 1
    Wratio = (1 - fracD) * WT / WD + fracD
    rhomean = pei.getDensity(['d', 't'], [fracD, 1 - fracD])
    # Bt = 7
    # Bt_exp = 0
    # Te = 2
    # ne = 1
    # y = 0.2
    c0 = 8.358 * Wratio**0.6667 * (abs(Bt) / 2.0) ** Bt_exp

    if y < 0:
        drpdt = 0.0
    else:
        drpdt = -c0 / rhomean * Te**1.6667 * ne**0.3333 / y**0.6667
        G = -drpdt * (4 * np.pi * pei.getDensity(['d'], [1]) * y * y)
        drpdt *= 1e-3  # cm/s to cm/ms
    return drpdt


def parks_Ned(Bt, Bt_exp, fracD, Te, ne, ycm):
    """
    This function calculates the ablation from a Neon-deuterium mixture pellet

    :param Bt: magnetic field (T)
    :param Bt_exp: exponent for reduction of ablation from Bt.
    :param fracD: fraction of pellet that is deuterium
    :param Te: electron temperature (eV)
    :param ne: electron density (1e20 m^-3)
    :param ycm: pellet radius (cm)

    """

    WD = pei.getAtomicWeight(['d'], [1])
    WNe = pei.getAtomicWeight(['Ne'], [1])
    Wratio = (1 - fracD) * WNe / WD + fracD
    rhomean = pei.getDensity(['d', 'Ne'], [fracD, 1 - fracD])
    X = fracD / (2 - fracD)
    AoX = 27.0 + np.tan(1.48 * X)

    c0 = AoX / (4 * np.pi) * (abs(Bt) / 2.0) ** Bt_exp
    if ycm < 0:
        drpdt = 0.0
    else:
        drpdt = -c0 / rhomean * Te**1.6667 * ne**0.3333 / ycm**0.6667
        drpdt *= 1e-3  # cm/s to cm/ms
    return drpdt


def parks_carbon(Bt, Bt_exp, fracC, Te, ne, ycm):
    """
    This function calculates the ablation from a carbon pellet

    :param Bt: magnetic field (T)
    :param Bt_exp: exponent for reduction of ablation from Bt.
    :param fracC: fraction of pellet that is carbon
    :param Te: electron temperature (eV)
    :param ne: electron density (1e20 m^-3)
    :param ycm: pellet radius (cm)

    """

    # Parks stated: multiplicative factor is ablation constant G_carbon relative to G_boron GB for pure Boron based on
    # mathmatica code "Z scaling interpolation"
    # variables appear according to their appearance in the formula of Gpr
    Te = Te * 1e3
    ne = ne * 1e14
    C0 = 8.146777e-9
    WC = pei.getAtomicWeight(['C'], [1])
    gamma = 5.0 / 3.0

    ZstarPlus1C = 2.86
    Albedo = 23.920538030089528 * np.log(1 + 0.20137080524063228 * ZstarPlus1C)
    flelectro = np.exp(-1.936)
    fL = (1.0 - Albedo / 100) * flelectro

    IstC = 60
    Ttmp = Te if Te > 30 else 30
    loglamCSlow = np.log(2.0 * Ttmp / IstC * np.sqrt(np.e * 2.0))
    # BLamda = 1 / (pei.getAtomicZ(['C'], [1]) * loglamCSlow) * np.sqrt(2 / (1 + pei.getAtomicZ(['C'], [1])))
    BLamdaq = 1 / (pei.getAtomicZ(['C'], [1]) * loglamCSlow) * (4 / (2.5 + 2.2 * np.sqrt(ZstarPlus1C)))
    Gpr = (
        C0
        * np.power(WC, 2.0 / 3.0)
        * np.power(gamma - 1.0, 1.0 / 3.0)
        * np.power(fL * ne, 1.0 / 3.0)
        * np.power(ycm, 4.0 / 3.0)
        * np.power(Te, 11.0 / 6.0)
        * np.power(BLamdaq, 2.0 / 3.0)
    )

    xiexp = 0.601
    lamdaa = 0.0933979540623963
    lamdab = -0.7127242270013098
    lamdac = -0.2437544205933372
    lamdad = -0.8534855445478313
    av = 10.420403555938629 * np.power(Ttmp / 2000.0, lamdaa)
    bv = 0.6879779829877795 * np.power(Ttmp / 2000.0, lamdab)
    cv = 1.5870910225610804 * np.power(Ttmp / 2000.0, lamdac)
    dv = 2.9695640286641840 * np.power(Ttmp / 2000.0, lamdad)
    fugCG = 0.777686
    CG = (
        fugCG
        * av
        * np.log(1 + bv * np.power(ne / 1e14, 2.0 / 3.0) * np.power(ycm, 2.0 / 3.0))
        / np.log(cv + dv * np.power(ne / 1e14, 2.0 / 3.0) * np.power(ycm, 2.0 / 3.0))
    )

    G = xiexp * CG * Gpr * (2.0 / Bt) ** Bt_exp

    if ycm < 0:
        drpdt = 0.0
    else:
        drpdt = -G / (4.0 * np.pi * pei.getDensity(['C'], [1]) * ycm * ycm)
        # print(Te, ne, ycm, ", G = ", G, ", drpdt = ", drpdt)
        drpdt *= 1e-3  # cm/s to cm/ms
    return drpdt


def pellet_parks(ycm, Te, ne):
    # -------------------------------------------------------------------------------
    # PELLET_PARKS determines the pellet ablation rate using a fit generated by Parks
    #  based on IPADBASE results
    #
    # References:
    #  P.B.Parks, M.N.Rosenbluth, Plasma Phys. (1998) 1380
    #  W.A.Houlberg, L.R.Baylor 6/2004
    #  W.A.Houlberg, F90 free format 8/2004
    # -------------------------------------------------------------------------------

    # input variables
    #  ycm,  & !pellet radius [cm]
    #  Te,  & !electron temperature [eV]
    #  ne  !electron nesity [10^20/m3]

    # Declaration of output variables
    #  rdot   !rate of change in pellet radius [m/s]

    # local variables
    Temin = 1.0e-3

    # REAL(KIND=rspec) :: &
    #  dinf,ycm,tinf,dndt,loglamH,Ihyd

    if ycm < 0 or Te < Temin:
        drpdt = 0.0

    # Convert to Park's units of cm and eV
    #    tinf=Te*1.0e3
    #    dinf=ne*1.0e-6

    Ihyd = 7.514  # Effective hydrogenic excitation energy
    loglamH = 1  # log(2*Te/Ihyd)

    # -------------------------------------------------------------------------------
    # Calculate ablation rate
    # -------------------------------------------------------------------------------
    # Compute the ablation rate in cm/s, Eqn 2
    drpdt = -8.2e15  # *(amup_pl**(-0.333)*ne**(0.333)*ycm**(-0.666)*Te**(1.833))/\
    # ((loglamH**0.666) *4*z_pi*(2*(denm_pl * 1e-6)))

    return drpdt
